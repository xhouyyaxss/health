<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc.xsd
							http://code.alibabatech.com/schema/dubbo
							http://code.alibabatech.com/schema/dubbo/dubbo.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">
    <!--
        http：用于定义相关权限控制
        指定哪些资源不需要进行权限校验，可以使用通配符
    -->
    <security:http security="none" pattern="/pages/login.html"/>
<!--    <security:http security="none" pattern="/login"/>-->
<!--    <security:http security="none" pattern="/index"/>-->
    <security:http security="none" pattern="/js/**" />
    <security:http security="none" pattern="/css/**" />
    <security:http security="none" pattern="/plugins/**" />
    <security:http security="none" pattern="/img/**" />

    <!--
        http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <security:headers>
<!--            设置在页面可以通过iframe访问受保护的页面，默认不允许访问-->
            <security:frame-options policy="SAMEORIGIN"></security:frame-options>
        </security:headers>
        <!--
            intercept-url：定义一个拦截规则
            pattern：对哪些url进行权限控制
            access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，请求的用户只需拥有其中的一个角色就能成功访问对应的URL
            isAuthenticated()：已经经过认证（不是匿名用户）
        -->
        <!--只要认证通过就可以访问-->
<!--        <security:intercept-url pattern="/index.jsp"  access="isAuthenticated()" />-->
<!--        <security:intercept-url pattern="/a.html"  access="isAuthenticated()" />-->
<!--        &lt;!&ndash;拥有add权限就可以访问b.html页面&ndash;&gt;-->
<!--        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />-->
<!--        &lt;!&ndash;拥有ROLE_ADMIN角色就可以访问c.html页面&ndash;&gt;-->
<!--        <security:intercept-url pattern="/c.html"  access="hasRole('ROLE_ADMIN')" />-->
<!--        &lt;!&ndash;拥有ROLE_ADMIN角色就可以访问d.html页面，注意：此处虽然写的是ADMIN角色，框架会自动给加上前缀ROLE_&ndash;&gt;-->
<!--        <security:intercept-url pattern="/d.html"  access="hasRole('ADMIN')" />-->

        <security:intercept-url pattern="/pages/**" access="isAuthenticated()"></security:intercept-url>
        <!--
            form-login：定义表单登录信息
            注意：验证成功之后的处理路径不能和/login相同，因为源码中是/login
        -->
        <security:form-login login-page="/pages/login.html" username-parameter="username" password-parameter="password" login-processing-url="/loginAction"   authentication-failure-url="/index"/>
<!--            default-target-url="/login.html"
                             always-use-default-target="true"
                             default-target-url="/pages/main.html"
                              always-use-default-target="true"
        <!-
            logout：退出登录
            logout-url：退出登录操作对应的请求路径
            logout-success-url：退出登录后的跳转页面
        -->
<!--        清除缓存-->
        <security:logout logout-url="/logout" logout-success-url="/pages/login.html" invalidate-session="true"/>
        <!--
            csrf：对应CsrfFilter过滤器
            disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
        -->
        <security:csrf disabled="true"></security:csrf>
    </security:http>

    <!--配置密码加密对象-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

    <!--
        authentication-manager：认证管理器，用于处理认证操作
    -->
    <security:authentication-manager>
        <!--
            authentication-provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <!--指定密码加密策略-->
            <security:password-encoder ref="passwordEncoder" />
        </security:authentication-provider>
    </security:authentication-manager>

    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled" />
</beans>